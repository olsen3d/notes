What is the internet

Internet - a system of globally interconnected devices.
Intranet - a private internet (a VPN)
LAN - Local Area Network

How does it work

A series of protocols everybody agreed to

IP - Internet Protocol
IP Address - a label assigned to an internet connected device
addresses are used by the internet protocol
IPv4 - 8.8.8.8 4.3 billion addresses
IPv6 - 2001:4860:4860:8888 340 undecillion addresses

TCP - Transmission Control Protocol - has things like error checking
UDP - User Datagram Protocol - assume it gets there - one way 

ping twitter.com

DNS - Domain name system - another protocol icann controls this - an internet phone book
      finds the closest server for this website


blog.jemyoung.com - subdomain
jemyoung.com - Domain
.com - TLD

TLD - top level domain - owned by compaines and countries

why subdomain? - it allows you to partition your data might look like a new website or a different app but still part of the site.

Nameservers - map domains to ip addresses - the record keepers of the internet

Trace Routes - traceroute google.com passed along from server to server until it gets to dest. hops
        helps to diagnose network problems. if it fails at like hop 2 then the ISP is probably down

ICMP - traceroute and ping - Internet Control Message Protocol - sort of health checks - you can configure not to respond to these at all
    or you can blackhole - just dont respond

Packet - a small bit of information - mainly contains metadata - where its going where it came from (headers) TCP gets packets and has error correction UDP packets are just broadcasts 

How does the internet work? it runs over TCP/IP protocols and on those protocols are packets that contain information - a series of trusts to hand off data to the next person. if it type in a website that gets resolved by a nameserver to a server that handles the data.

Net neutrality says that the trust is broken - an ISP can say if a packet is going to ex. sri lanka - they can tax it at a different rate or make it go faster or slower


VIM - Vi Improved - a text editor - VI is good because it is on almost every server. You wont always be able to open things in vscode - no mouse

VIM modes - 
	Insert mode - i - editing text
command mode - ESC - copy paste etc.
	Last line mode - : - searching saving exiting

How to open VIM - vi in bash
How to quit VIM - ESC :q!
Save/write - :w

Server - what does a server do? - serves content - responds to requests - anything really can be a server

vi simpleserver.js

server sits in a datacenter your request will probably go through headers

The Cloud - let someone else manage the server hardware - distributed globally so its faster and a shorter distance to route - you want the minimum amount of hops.

Elastic computing - scales as needed - you can just get more servers from the data centers - costs adjust with traffic.

VPS - slice a server to what are you are using $5 a month etc.
digital ocean can host - droplet is virtual server
EC2 is amazon virtual server

Linux - linux - ubuntu
  kernel - talks to cpu etc.
  utilites - apps that do one thing they can be updated without breaking anything
choose an LTS version - Long Term Support

SSH - a type of user authentication - Secure Socket Shell - key pair a public ket and a private key
your computer has private key and the public key is in the server. everything is encrypted and goes through a "tunnel"

SSH Key ~/.ssh ls ssh-keygen - makes a private and a public key
ssh root@174.138.47.198 - to log in
ssh -i fsfe - the private key to use 
ssh -i fsfe root@174.138.47.198
exit - to exit the server

dont use root in ubuntu

buy a domain - namecheap, google, godaddy

DNS records 
  A records - map name to an ip address - mike.com > 23.23.185.61
  CNAME - maps name to name - blog.mike.com > 23.23.185.61

dig olsen.dev - show all the records for website

fractalsare.cool on google domains

add 2 A Records with your IP address @ and www
use digital ocean to add domain
update nameserver on google

on DO add an A record hostname is @, direct to your server, TTL 3600
add an A record hostname www, same server, TTL 3600

server IP - 174.138.47.198

go to google domains and add nameservers from DO there should be 3 of them under your A records



--------------

HTTP
request <---> response

http datagram of a request:

GET / HTTP/1.1
Host: olsen.dev
User-Agent: Mozilla/5.0 Macintosh Intel
  Safari/537.21
Accept: text/html
Accept-Encoding: gzip, br

A packet is made up of data and metadata - part of the metadata is headers

Headers - what kind of encoding, where its coming from, content type
  GET, Host, User-agent, Accept, etc.
  certain headers are unmidifyable - Host
  User agent - which browser, what features it has, etc. version number
  Set-cookie - sets stateful information
  X - custom headers

Cookie - a piece of metadata that goes on every request - persists on the browser until expiration
        it lets you extend the user ecxperience across sessions. too many cookies can add overhead and slow your requests

a response:

HTTP/1.1 200 OK
Server: nginx/ ubuntu
Date: sep 25th 2019
Content-Type: html/text
Cointent-Length: 12


Conatainers & Microservices

microservice - it only does one thing - architecure of loosely connected services
monolith - does more than one thing

Container - lighter weight than a virtual machine - a set of libraries that it needs
doesnt care about the OS - portable
can create a node app wrap it in a container and put it whereever you want OS doesnt matter
Decouples the application from the inftastructure

Docker, Amazon ECS Elastic Container Service

Orchesration - a way of conducting your containers - set them up
take all the containers and all the OS and apply them to the servers

Docker swarm, Amazon EKS Elastic Kubernetes Service, Kubernetes "K8s"

elastic computing can expand - netflix after work etc.

Load Balancers - routes all the traffic to the appropriate cluster
Scheduling algos - round robin, IP hashing, random choice, least connections, least Load
cpu, memory, and network load

nginx has a load balancer too
upstream backend {
  least_conn;
  server backend1.example.com
  server backend1.example.com
}

server {
  location / {
    proxy_pass http://backend
  }
}

what about sessions - what if you go to a different server you arent authed on
sticky sessions will keep you on that server
ip hashing or an auth layer before you even hit nginx - once you are authenticated at the firewall then you can go to any server doesnt matter

Deployments
ansible, vagrant, puppet will deploy to your servers 20s to 100s
write sa script to roll this out to each server

Databases
relational - SQL - tables - related data - strict structure "schema"
non-relational = noSQL - redis, mongo - data agnostic - loose structure
redis is a cache database - key value store
mongo - key - with a json db 
amazon redshift - for petabyte data

indexDB is in your browser

Redis - 
sudo apt install redis-server
node-redis

websockets - 2 way message from client to serverpersistent bidirectional connection between client and server
TCP requires a handshake etc to send data
websocket keeps connection alive via a tunnel over TCP
